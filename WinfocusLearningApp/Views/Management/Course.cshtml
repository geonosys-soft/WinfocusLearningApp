@model WinfocusLearningApp.DataEntity.TblCourse
@{
    ViewBag.Title = "Course Management";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    :root {
        --primary-color: #4361ee;
        --primary-hover: #3a56d4;
        --secondary-color: #3f37c9;
        --danger-color: #f72585;
        --danger-hover: #e5177b;
        --success-color: #4cc9f0;
        --success-hover: #2fb5e0;
        --text-color: #2b2d42;
        --light-bg: #f8f9fa;
    }

    body {
        background-image: url('https://www.transparenttextures.com/patterns/cubes.png');
        background-attachment: fixed;
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: var(--text-color);
        min-height: 100vh;
    }

    .top-bar {
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        color: white;
        padding: 20px 0;
        margin-bottom: 40px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        position: relative;
        overflow: hidden;
    }

        .top-bar::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #4cc9f0, #f72585, #7209b7);
        }

        .top-bar h1 {
            margin: 0;
            padding: 0 30px;
            font-weight: 600;
            text-shadow: 1px 1px 3px rgba(0,0,0,0.2);
        }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .action-container {
        display: flex;
        justify-content: center;
        gap: 30px;
        margin-top: 40px;
        flex-wrap: wrap;
    }

    .action-box {
        background: white;
        border-radius: 12px;
        padding: 40px 30px;
        width: 280px;
        text-align: center;
        box-shadow: 0 8px 16px rgba(0,0,0,0.1);
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        position: relative;
        overflow: hidden;
        border: none;
    }

        .action-box:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 24px rgba(0,0,0,0.15);
        }

        .action-box.insert {
            border-top: 4px solid var(--success-color);
        }

        .action-box.edit {
            border-top: 4px solid var(--primary-color);
        }

        .action-box.delete {
            border-top: 4px solid var(--danger-color);
        }

    .action-icon {
        font-size: 56px;
        margin-bottom: 20px;
        transition: transform 0.3s;
    }

    .action-box:hover .action-icon {
        transform: scale(1.1);
    }

    .action-title {
        font-weight: 600;
        font-size: 24px;
        margin-bottom: 15px;
    }

    .action-desc {
        color: #6c757d;
        font-size: 16px;
    }

    .form-container {
        max-width: 600px;
        margin: 40px auto;
        background: white;
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.1);
        animation: fadeIn 0.5s ease-out;
        border-top: 4px solid var(--primary-color);
    }

    #insert-form {
        display: block;
    }

    #edit-form, #delete-form {
        display: none;
    }

    .form-container h3 {
        margin-top: 0;
        color: var(--primary-color);
        font-size: 24px;
        margin-bottom: 25px;
        position: relative;
        padding-bottom: 10px;
    }

        .form-container h3::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            width: 60px;
            height: 3px;
            background: var(--primary-color);
        }

    .form-group {
        margin-bottom: 25px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 16px;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

    .btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 500;
        transition: all 0.3s;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

        .btn:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .btn i {
            margin-right: 8px;
        }

    .btn-submit {
        background-color: var(--success-color);
    }

        .btn-submit:hover {
            background-color: var(--success-hover);
        }

    .btn-delete {
        background-color: var(--danger-color);
    }

        .btn-delete:hover {
            background-color: var(--danger-hover);
        }

    .close-btn {
        position: absolute;
        top: 15px;
        right: 15px;
        background: none;
        border: none;
        font-size: 20px;
        cursor: pointer;
        color: #6c757d;
        transition: color 0.3s;
    }

        .close-btn:hover {
            color: var(--danger-color);
        }

    .floating-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        padding: 15px 25px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        display: flex;
        align-items: center;
        z-index: 1000;
        transform: translateX(150%);
        transition: transform 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

        .floating-notification.show {
            transform: translateX(0);
        }

    .notification-icon {
        margin-right: 10px;
        font-size: 24px;
    }

    .notification-success {
        border-left: 4px solid var(--success-color);
    }

    .notification-error {
        border-left: 4px solid var(--danger-color);
    }
</style>

<div class="top-bar">
    <h1><i class="fas fa-book"></i> Course Management</h1>
</div>

<div class="container">
    <div class="action-container">
        <div class="action-box insert" onclick="showForm('insert')">
            <div class="action-icon">➕</div>
            <div class="action-title">Add Course</div>
            <div class="action-desc">Create a new course record</div>
        </div>

        <div class="action-box edit" onclick="showForm('edit')">
            <div class="action-icon">✏️</div>
            <div class="action-title">Edit Course</div>
            <div class="action-desc">Modify existing course</div>
        </div>

        <div class="action-box delete" onclick="showForm('delete')">
            <div class="action-icon">🗑️</div>
            <div class="action-title">Remove Course</div>
            <div class="action-desc">Delete course record</div>
        </div>
    </div>

    <!-- Insert Form (shown by default) -->
    <div id="insert-form" class="form-container">
        <h3><i class="fas fa-plus-circle"></i> Add Course</h3>
        <div class="form-group">
            <label for="academicYear">Academic Year:</label>
            <select id="academicYear" class="form-control" required>
                <option value="">-- Select Academic Year --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="syllabus">Syllabus:</label>
            <select id="syllabus" class="form-control" required>
                <option value="">-- Select Syllabus --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="class">Class:</label>
            <select id="class" class="form-control" required>
                <option value="">-- Select Class --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="stream">Stream:</label>
            <select id="stream" class="form-control" required>
                <option value="">-- Select Stream --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="courseName">Course Name:</label>
            <input type="text" id="courseName" class="form-control" placeholder="Enter course name" required>
        </div>
        <button type="button" class="btn btn-submit" onclick="submitForm('insert')">
            <i class="fas fa-check"></i> Save
        </button>
    </div>

    <!-- Edit Form -->
    <div id="edit-form" class="form-container">
        <button class="close-btn" onclick="hideForm('edit')">×</button>
        <h3><i class="fas fa-edit"></i> Edit Course</h3>
        <div class="form-group">
            <label for="edit-academicYear">Academic Year:</label>
            <select id="edit-academicYear" class="form-control" required>
                <option value="">-- Select Academic Year --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="edit-syllabus">Syllabus:</label>
            <select id="edit-syllabus" class="form-control" required>
                <option value="">-- Select Syllabus --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="edit-class">Class:</label>
            <select id="edit-class" class="form-control" required>
                <option value="">-- Select Class --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="edit-stream">Stream:</label>
            <select id="edit-stream" class="form-control" required>
                <option value="">-- Select Stream --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="edit-course">Course:</label>
            <select id="edit-course" class="form-control" required>
                <option value="">-- Select Course --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="edit-courseName">New Course Name:</label>
            <input type="text" id="edit-courseName" class="form-control" placeholder="Enter new course name" required>
        </div>
        <button type="button" class="btn" onclick="submitForm('edit')">
            <i class="fas fa-save"></i> Update
        </button>
    </div>

    <!-- Delete Form -->
    <div id="delete-form" class="form-container">
        <button class="close-btn" onclick="hideForm('delete')">×</button>
        <h3><i class="fas fa-trash-alt"></i> Delete Course</h3>
        <div class="form-group">
            <label for="delete-academicYear">Academic Year:</label>
            <select id="delete-academicYear" class="form-control" required>
                <option value="">-- Select Academic Year --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="delete-syllabus">Syllabus:</label>
            <select id="delete-syllabus" class="form-control" required>
                <option value="">-- Select Syllabus --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="delete-class">Class:</label>
            <select id="delete-class" class="form-control" required>
                <option value="">-- Select Class --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="delete-stream">Stream:</label>
            <select id="delete-stream" class="form-control" required>
                <option value="">-- Select Stream --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label for="delete-course">Course:</label>
            <select id="delete-course" class="form-control" required>
                <option value="">-- Select Course --</option>
                <!-- Options will be populated from database -->
            </select>
        </div>
        <div class="form-group">
            <label>
                <input type="checkbox" id="confirm-delete" required> I confirm I want to delete this course
            </label>
        </div>
        <button type="button" class="btn btn-delete" onclick="submitForm('delete')" disabled>
            <i class="fas fa-trash"></i> Delete
        </button>
    </div>
</div>

<!-- Notification -->
<div id="notification" class="floating-notification">
    <div class="notification-icon"></div>
    <div class="notification-message"></div>
</div>

<!-- Font Awesome for icons -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<script>
    // Show form function
    function showForm(formType) {
        // Hide all forms first
        document.querySelectorAll('.form-container').forEach(form => {
            form.style.display = 'none';
        });

        // Show the selected form
        const form = document.getElementById(formType + '-form');
        form.style.display = 'block';
        loadDropdownData();

        // Scroll to form
        form.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // Hide form function
    function hideForm(formType) {
        document.getElementById(formType + '-form').style.display = 'none';
        document.getElementById('insert-form').style.display = 'block';
    }

    // Delete confirmation toggle
    document.getElementById('confirm-delete').addEventListener('change', function () {
        document.querySelector('#delete-form .btn').disabled = !this.checked;
    });

    // Load dropdown data from database
    async function loadDropdownData() {
        try {
            // Load Academic Years
            const academicYearResponse = await fetch('/api/ManagementApi/FetchAccademicYear');
            const academicYears = await academicYearResponse.json();
            populateDropdown('academicYear', academicYears);
            populateDropdown('edit-academicYear', academicYears);
            populateDropdown('delete-academicYear', academicYears);

            // Load Syllabi
            const syllabusResponse = await fetch('/api/ManagementApi/FetchSyllabus');
            const syllabi = await syllabusResponse.json();
            populateDropdown('syllabus', syllabi);
            populateDropdown('edit-syllabus', syllabi);
            populateDropdown('delete-syllabus', syllabi);

            // Load Classes
            const classResponse = await fetch('/api/ManagementApi/FetchClass');
            const classes = await classResponse.json();
            populateDropdown('class', classes);
            populateDropdown('edit-class', classes);
            populateDropdown('delete-class', classes);

            // Load Streams
            const streamResponse = await fetch('/api/ManagementApi/FetchStream');
            const streams = await streamResponse.json();
            populateDropdown('stream', streams);
            populateDropdown('edit-stream', streams);
            populateDropdown('delete-stream', streams);

            // Load Courses (for edit and delete forms)
            const courseResponse = await fetch('/api/ManagementApi/FetchCourse');
            const courses = await courseResponse.json();
            populateDropdown('edit-course', courses);
            populateDropdown('delete-course', courses);

        } catch (error) {
            showNotification('Error loading dropdown data', 'error');
            console.error('Error loading dropdown data:', error);
        }
    }

    function populateDropdown(dropdownId, data) {
        const dropdown = document.getElementById(dropdownId);
        if (!dropdown) return;

        // Clear previous options except the first one
        while (dropdown.options.length > 1) {
            dropdown.remove(1);
        }

        // Add new options
        data.forEach(item => {
            const option = document.createElement('option');
            option.value = item.Id;
            option.textContent = item.Name || item.AccademicYear || item.ClassName || item.StreamName || item.CourseName;
            dropdown.appendChild(option);
        });
    }

    // Submit form function
    async function submitForm(formType) {
        const notification = document.getElementById('notification');
        const notificationIcon = notification.querySelector('.notification-icon');
        const notificationMsg = notification.querySelector('.notification-message');

        try {
            let response, message;

            switch (formType) {
                case 'insert':
                    const academicYearId = document.getElementById('academicYear').value;
                    const syllabusId = document.getElementById('syllabus').value;
                    const classId = document.getElementById('class').value;
                    const streamId = document.getElementById('stream').value;
                    const courseName = document.getElementById('courseName').value.trim();

                    if (!academicYearId || !syllabusId || !classId || !streamId || !courseName) {
                        showNotification('Please fill all fields', 'error');
                        return;
                    }

                    response = await fetch('/api/ManagementApi/AddCourse', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            AcademicYearId: academicYearId,
                            SyllabusId: syllabusId,
                            ClassId: classId,
                            StreamId: streamId,
                            CourseName: courseName
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to add course');
                    }

                    message = `Course "${courseName}" added successfully!`;
                    showNotification(message, 'success');

                    // Clear form
                    document.getElementById('courseName').value = '';
                    break;

                case 'edit':
                    const editAcademicYearId = document.getElementById('edit-academicYear').value;
                    const editSyllabusId = document.getElementById('edit-syllabus').value;
                    const editClassId = document.getElementById('edit-class').value;
                    const editStreamId = document.getElementById('edit-stream').value;
                    const editCourseId = document.getElementById('edit-course').value;
                    const editCourseName = document.getElementById('edit-courseName').value.trim();

                    if (!editAcademicYearId || !editSyllabusId || !editClassId || !editStreamId || !editCourseId || !editCourseName) {
                        showNotification('Please fill all fields', 'error');
                        return;
                    }

                    response = await fetch('/api/ManagementApi/UpdateCourse', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            Id: editCourseId,
                            AcademicYearId: editAcademicYearId,
                            SyllabusId: editSyllabusId,
                            ClassId: editClassId,
                            StreamId: editStreamId,
                            CourseName: editCourseName
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to update course');
                    }

                    const courseDropdown = document.getElementById('edit-course');
                    const selectedCourseText = courseDropdown.options[courseDropdown.selectedIndex].text;

                    message = `Course "${selectedCourseText}" updated to "${editCourseName}" successfully!`;
                    showNotification(message, 'success');

                    // Clear form
                    document.getElementById('edit-courseName').value = '';
                    hideForm('edit');
                    break;

                case 'delete':
                    const deleteCourseId = document.getElementById('delete-course').value;

                    if (!deleteCourseId) {
                        showNotification('Please select a course to delete', 'error');
                        return;
                    }

                    response = await fetch('/api/ManagementApi/DeleteCourse', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            Id: deleteCourseId
                        })
                    });

                    if (!response.ok) {
                        throw new Error('Failed to delete course');
                    }

                    const deleteCourseDropdown = document.getElementById('delete-course');
                    const deletedCourseText = deleteCourseDropdown.options[deleteCourseDropdown.selectedIndex].text;

                    message = `Course "${deletedCourseText}" deleted successfully!`;
                    showNotification(message, 'success');

                    // Clear form
                    document.getElementById('confirm-delete').checked = false;
                    document.querySelector('#delete-form .btn').disabled = true;
                    hideForm('delete');
                    break;
            }
        } catch (error) {
            showNotification(error.message || 'Something went wrong', 'error');
            console.error('Error:', error);
        }
    }

    // Show notification function
    function showNotification(message, type) {
        const notification = document.getElementById('notification');
        const notificationIcon = notification.querySelector('.notification-icon');
        const notificationMsg = notification.querySelector('.notification-message');

        // Clear previous classes
        notification.className = 'floating-notification';
        notification.classList.add('show', `notification-${type}`);

        // Set icon and message
        if (type === 'success') {
            notificationIcon.innerHTML = '<i class="fas fa-check-circle"></i>';
            notificationIcon.style.color = '#4cc9f0';
        } else {
            notificationIcon.innerHTML = '<i class="fas fa-exclamation-circle"></i>';
            notificationIcon.style.color = '#f72585';
        }

        notificationMsg.textContent = message;

        // Auto hide after 5 seconds
        setTimeout(() => {
            notification.classList.remove('show');
        }, 5000);
    }

    // Close notification when clicked
    document.getElementById('notification').addEventListener('click', function () {
        this.classList.remove('show');
    });

    // Load dropdown data when page loads
    document.addEventListener('DOMContentLoaded', function () {
        loadDropdownData();

        // Add event listeners for cascading dropdowns if needed
        // Example:
        // document.getElementById('academicYear').addEventListener('change', function() {
        //     // Load syllabi based on selected academic year
        // });
    });
</script>