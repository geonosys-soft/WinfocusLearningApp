@model WinfocusLearningApp.ViewModels.QuestionAnswerViewModel
@{

    ViewBag.Title = "QuestionList";
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title</title>
    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary-color: #667eea;
            --primary-dark: #5a67d8;
            --secondary-color: #764ba2;
            --accent-color: #f093fb;
            --success-color: #48bb78;
            --error-color: #f56565;
            --warning-color: #ed8936;
            --bg-gradient: linear-gradient(135deg, #4361ee 0%, #4361ee 100%);
            --card-shadow: 0 20px 40px rgba(102, 126, 234, 0.1);
            --hover-shadow: 0 25px 50px rgba(102, 126, 234, 0.2);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: #f7faff;
            min-height: 100vh;
            padding: 20px 0;
            position: relative;
            overflow-x: hidden;
            color: #1a202c;
        }

        .container {
            max-width: 1800px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .main-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 24px;
            box-shadow: var(--card-shadow);
            border: 1px solid rgba(255, 255, 255, 0.2);
            overflow: hidden;
        }

        .header {
            background: var(--bg-gradient);
            color: white;
            padding: 40px;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

            .header h1 {
                font-size: 2.5rem;
                font-weight: 700;
                margin-bottom: 10px;
                position: relative;
                z-index: 1;
            }

        .content-container {
            padding: 40px;
        }

        .page-title {
            font-size: 2rem;
            font-weight: 600;
            color: #4361ee;
            margin-bottom: 30px;
            text-align: center;
        }

        .filter-section {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
            align-items: center;
        }

        .filter-select {
            padding: 14px 18px;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 1rem;
            background: white;
            color: #1a202c;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
        }

            .filter-select:focus {
                border-color: var(--primary-color);
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                outline: none;
            }

        .table-container {
            background: white;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
            overflow-x: auto;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.95rem;
        }

            .data-table th {
                background: var(--bg-gradient);
                color: white;
                padding: 20px 15px;
                font-weight: 600;
                text-align: left;
                font-size: 0.9rem;
                white-space: nowrap;
            }

            .data-table td {
                padding: 18px 15px;
                border-bottom: 1px solid #f1f5f9;
                font-weight: 500;
                color: #2d3748;
                vertical-align: middle;
            }

                .data-table td:last-child {
                    white-space: nowrap;
                }

            .data-table tbody tr:hover {
                background: rgba(102, 126, 234, 0.05);
            }

            .data-table tbody tr:last-child td {
                border-bottom: none;
            }

        .action-btn {
            border: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-size: 0.85rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            margin-right: 8px;
        }

            .action-btn i {
                font-size: 0.9rem;
            }

        .btn-view {
            background: var(--primary-color);
            color: white;
        }

            .btn-view:hover {
                background: var(--primary-dark);
                transform: translateY(-2px);
                box-shadow: var(--hover-shadow);
            }

        .btn-edit {
            background: var(--warning-color);
            color: white;
        }

            .btn-edit:hover {
                background: #dd6b20; 
                transform: translateY(-2px);
            }

        .btn-delete {
            background: var(--error-color);
            color: white;
        }

            .btn-delete:hover {
                background: #c53030; 
                transform: translateY(-2px);
            }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            display: none; 
            align-items: center;
            justify-content: center;
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }
        
        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 16px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
            width: 90%;
            max-width: 600px;
            animation: slideInUp 0.4s ease-out;
        }

        .modal-header h3 {
            font-size: 1.5rem;
            color: var(--primary-color);
            margin-bottom: 20px;
        }

        .modal-body .question {
            font-size: 1.2rem;
            font-weight: 600;
            color: #2d3748;
            margin-bottom: 20px;
        }

        .modal-body .options-list {
            list-style-type: none;
            padding-left: 0;
        }

            .modal-body .options-list li {
                background-color: #f7faff;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 12px 15px;
                margin-bottom: 10px;
                font-weight: 500;
            }

        .modal-footer {
            margin-top: 30px;
            display: flex;
            justify-content: flex-end;
            gap: 15px;
        }

        .modal-btn {
            padding: 12px 24px;
        }

        .btn-ok {
            background: var(--success-color);
            color: white;
        }

            .btn-ok:hover {
                background: #38a169;
            }


        @@keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @@keyframes slideInUp {
            from {
                transform: translateY(50px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="main-card">
            <div class="header">
                <h1>Question Answer List</h1>
            </div>

            <div class="content-container">
                <h2 class="page-title">Filter & Sort Questions</h2>
                @using (Html.BeginForm("QuestionList", "Admin_DTP", FormMethod.Post, new { @id = "FormSearch" }))
                {
                    <!-- Filter Section -->
                    <div class="filter-section">
                        @Html.DropDownList("AccademicYearId", null, new { @class = "filter-select", @required = true })
                        @Html.DropDownList("SyllabusID", null, "--- Syllabus ---", new { @class = "filter-select", @required = true })
                        @Html.DropDownList("ClassID", null, "--- Class ---", new { @class = "filter-select", @required = true })
                        @Html.DropDownList("StreamID", null, "--- Stream ---", new { @class = "filter-select", @required = true })
                        @Html.DropDownList("SubjectID", null, "--- Subject ---", new { @class = "filter-select", @required = true })
                        @Html.DropDownList("ChapterID", null, "--- Chapter ---", new { @class = "filter-select", @required = true })

                    </div>
                    <div class="filter-section">

                        @Html.DropDownList("CreatedBy", null, "--- DTP ---", new { @class = "filter-select", @required = true })
                        @Html.DropDownList("QuestionType", null, "--- Question Type ---", new { @class = "filter-select", @required = true })
                    </div>
                }


                <!-- Data Table -->
                <div class="table-container">
                    <table class="data-table" id="questionsTable">
                        <thead>
                            <tr>
                                <th>SL.NO</th>
                                <th>Question</th>
                                <th style="text-align:right; padding-right:40px;">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.questionAnswerViewModels != null)
                            {
                                int i = 0;
                                foreach (var data in Model.questionAnswerViewModels)
                                {
                                    i++;
                                    <tr data-question="@data.Question" data-image="@(data.QImage != null ? $"data:image/png;base64,{Convert.ToBase64String(data.QImage)}"
        : Url.Content("~/images/no-image.png"))" data-options="@data.Option1|@data.Option2|@data.Option3|@data.Option4">
                                        <td>@i</td>
                                        <td>
                                            @data.Question <br />
                                            @if (data.QImage != null)
                                            {
                                                string base64Image = Convert.ToBase64String(data.QImage);
                                                string imageSrc = $"data:image/png;base64,{base64Image}";
                                                <img src="@imageSrc" alt="Question Image" style="width:150px;height:150px;" />
                                            }
                                        </td>
                                        <td style="text-align:right;">
                                            <button class="action-btn btn-view"><i class="fas fa-eye"></i> View</button>
                                            <a class="action-btn btn-edit" href="~/Admin_DTP/QuestionAnswers/@data.ID"><i class="fas fa-edit"></i> Edit</a>
                                            <button class="action-btn btn-delete" onclick="openModal(@data.ID,'@i','@data.Question')"><i class="fas fa-trash"></i> Delete</button>
                                        </td>
                                    </tr>
                                }
                            }

                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- View Details Modal -->
    <div id="viewModal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Question Details</h3>
            </div>
            <div class="modal-body">
                <p id="modalQuestion" class="question"></p>
                <img src="#" id="modelQimage" style="width:150px;height:150px;" alt="Alternate Text" />
                <ul id="modalOptions" class="options-list">
                    <!-- Options will be populated by JavaScript -->
                </ul>
            </div>
            <div class="modal-footer">
                <button class="action-btn btn-edit modal-btn"><i class="fas fa-edit"></i> Edit</button>
                <button id="modalOkBtn" class="action-btn btn-ok modal-btn"><i class="fas fa-check"></i> OK</button>
            </div>
        </div>
    </div>


    <div class="modal" id="deleteModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Delete Question</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Do you Want to delete <span id="deleteContent"></span></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    @using (Html.BeginForm("DeleteQuestion", "Admin_DTP", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="deleteId" id="deleteId" />
                        <button type="submit" class="btn btn-danger">Delete</button>
                        
                    }
                    
                </div>
            </div>
        </div>
    </div>


    <!--Delete Model
     <div id="deleteModal" class="modal-overlay">
         <div class="modal-content">
             <div class="modal-header">
                 <h3>Delete Question</h3>
             </div>
             <div class="modal-body">
                 <p>Do you Want to delete <span id="deleteContent"></span></p>
             </div>
             <div class="modal-footer">

                 @using (Html.BeginForm("DeleteQuestion", "Admin_DTP", FormMethod.Post))
                 {
                     @Html.AntiForgeryToken()
                     <input type="hidden" name="deleteId" id="deleteId" />
                     <button type="button" class="btn btn-success" onclick="closeModal()">Cancel</button>
                     <button type="submit" class="btn btn-danger">Delete</button>
                 }
             </div>
         </div>
     </div>
    -->
    <script>
        function closeModal() {
            document.getElementById('deleteModal').style.display = 'none';
        }
        // Close modal when clicking outside of it
        window.onclick = function (event) {
            const modal = document.getElementById('deleteModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
        function openModal(id, content, content2) {
            var myModal = new bootstrap.Modal(document.getElementById('deleteModal'));
             document.getElementById("deleteContent").innerText = content + ' . ' + content2;
             document.getElementById("deleteId").value = id;
            myModal.show();
        }

        document.addEventListener('DOMContentLoaded', function () {
            const viewModal = document.getElementById('viewModal');
            const deleteModal = document.getElementById('deleteModal');
            const modalQuestion = document.getElementById('modalQuestion');
            const modalOptions = document.getElementById('modalOptions');
            const modalOkBtn = document.getElementById('modalOkBtn');
            const modelImg = document.getElementById('modelQimage');
            // Function to show the modal
            function showModal(questionText, imageSrc, optionsArray) {
                modalQuestion.textContent = questionText;
                modelImg.src = imageSrc ?? '';
                // Clear previous options
                modalOptions.innerHTML = '';

                // Populate new options
                optionsArray.forEach((opt, index) => {
                    const li = document.createElement('li');
                    li.textContent = `Option ${String.fromCharCode(65 + index)}: ${opt}`;
                    modalOptions.appendChild(li);
                });

                viewModal.style.display = 'flex';
            }

            // Function to hide the modal
            function hideModal() {
                viewModal.style.display = 'none';

            }

            // Add event listeners to all view buttons
            document.querySelectorAll('.btn-view').forEach(button => {
                button.addEventListener('click', function () {
                    const row = this.closest('tr');
                    const questionText = row.dataset.question;
                    const imageSrc = row.dataset.image;
                    const optionsString = row.dataset.options;
                    const optionsArray = optionsString.split('|');

                    showModal(questionText, imageSrc, optionsArray);
                });
            });
            /*

            document.querySelectorAll('.btn-delete').forEach(button => {
                button.addEventListener('click', () => {
                    if (confirm('Are you sure you want to delete this question?')) {
                        alert('Question deleted!');

                    }
                });
            });
            */

            // Close modal when OK button is clicked
            modalOkBtn.addEventListener('click', hideModal);

            // Close modal when clicking on the overlay
            viewModal.addEventListener('click', function (event) {
                if (event.target === viewModal) {
                    hideModal();
                }
            });
        });

        // Load academic years from database
        async function loadAcademicYears() {
            try {
                const response = await fetch('/api/ManagementApi/FetchAccademicYear');
                const data = await response.json();

                const dropdownIds = ['AccademicYearId'];

                dropdownIds.forEach(id => {
                    const dropdown = document.getElementById(id);
                    dropdown.innerHTML = '<option value="">-- Select Academic Year --</option>';

                    data.forEach(year => {
                        const option = document.createElement('option');
                        option.value = year.Id;
                        option.textContent = year.AccademicYear;
                        dropdown.appendChild(option);
                    });
                });
            } catch (error) {
                showNotification('Failed to load academic years', 'error');
                console.error('Error loading academic years:', error);
            }
        }

        function loadSyllabusOptions(academicYearId, targetSelectId) {
            if (!academicYearId) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchSyllabus/${academicYearId}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.Name || syllabus.Name.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }

        // Load class data when syllabus is selected
        function loadClassOptions(SLBID, targetSelectId) {
            if (!SLBID) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchGrade/${SLBID}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.Name || syllabus.Name.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }

        // Load Stream data when grade is selected
        function loadStreamOptions(classId, targetSelectId) {
            if (!classId) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchStream/${classId}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.Name || syllabus.Name.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }
        // Load Stream data when grade is selected
        function loadCourseOptions(streamId, targetSelectId) {
            if (!streamId) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchCourse//${streamId}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.Name || syllabus.Name.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }
        //LOAD SUBJECTS
        function loadSubjectOptions(CourseId, targetSelectId) {
            if (!CourseId) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchSubject/${CourseId}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.Name || syllabus.Name.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }
        //LOAD Chapter
        function loadChapterOptions(SubjectId, targetSelectId) {
            if (!SubjectId) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchChapter/${SubjectId}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.ChapterName || syllabus.ChapterName.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }
        //LOAD Chapter
        function loadSubChapterOptions(ChapterId, targetSelectId) {
            if (!ChapterId) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchSubChapter/${ChapterId}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.SubChapterName || syllabus.SubChapterName.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }
        //LOAD Chapter
        function loadModuleOptions(SubChapterId, targetSelectId) {
            if (!SubChapterId) return;
            //showNotification('Failed to load academic years'+academicYearId, 'error');
            fetch(`/api/ManagementApi/FetchModule/${SubChapterId}`)
                .then(response => response.json())
                .then(data => {
                    const select = document.getElementById(targetSelectId);
                    select.innerHTML = '<option value="">-- Select Syllabus --</option>';
                    data.forEach(syllabus => {
                        const option = document.createElement('option');
                        option.value = syllabus.Id;
                        option.textContent = syllabus.ModuleName || syllabus.ModuleName.substring(0, 50) + '...';
                        select.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading syllabus:', error);
                    showNotification('Failed to load syllabus', 'error');
                });
        }

        // Event listeners for accademic year dropdowns form
        document.getElementById('AccademicYearId').addEventListener('change', function () {
            loadSyllabusOptions(this.value, 'SyllabusID');
        });
        // Event listeners for accademic year dropdowns form
        document.getElementById('SyllabusID').addEventListener('change', function () {
            loadClassOptions(this.value, 'ClassID');
        });
        // Event listeners for grade dropdowns form
        document.getElementById('ClassID').addEventListener('change', function () {
            loadStreamOptions(this.value, 'StreamID');
        });
        document.getElementById('StreamID').addEventListener('change', function () {
            loadSubjectOptions(this.value, 'SubjectID');
        });

        document.getElementById('SubjectID').addEventListener('change', function () {
            loadChapterOptions(this.value, 'ChapterID');
        });
        document.getElementById('QuestionType').addEventListener('change', function () {
            document.getElementById("FormSearch").submit();
        });

    </script>
</body>
</html>
